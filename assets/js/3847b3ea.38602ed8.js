"use strict";(self.webpackChunkducktapengine_github_io=self.webpackChunkducktapengine_github_io||[]).push([[581],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||s[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1959:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],l={},p="Setup",u={unversionedId:"setup",id:"setup",title:"Setup",description:"There are two ways to setup Ducktape, one is to use the prebuilt binaries, the other is to build the source code from scratch and use those binaries.",source:"@site/docs/setup.md",sourceDirName:".",slug:"/setup",permalink:"/docs/setup",editUrl:"https://github.com/ducktapeengine/ducktape/tree/main/packages/create-ducktape/templates/shared/docs/setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hello Ducktape",permalink:"/docs/intro"}},c=[{value:"Compiling Ducktape",id:"compiling-ducktape",children:[],level:3},{value:"Setting up the project",id:"setting-up-the-project",children:[],level:3}],s={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setup"},"Setup"),(0,o.kt)("p",null,"There are two ways to setup Ducktape, one is to use the prebuilt binaries, the other is to build the source code from scratch and use those binaries."),(0,o.kt)("p",null,"If you want to use the prebuilt binaries, you can download the latest prebuilt binaries from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DucktapeEngine/Ducktape/releases/latest"},"here"),"."),(0,o.kt)("h3",{id:"compiling-ducktape"},"Compiling Ducktape"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you're using the prebuilt binaries, you may skip this step. Feel free to move ahead to ",(0,o.kt)("a",{parentName:"p",href:"#setting-up-the-project"},"Setting up the project"),"."))),(0,o.kt)("p",null,"Compiling Ducktape requires you to have: Git, a C++ compiler, CMake, a build system like make."),(0,o.kt)("p",null,"Run the following commands to compile Ducktape:"),(0,o.kt)("p",null,"Windows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/ducktapeengine/ducktape.git\ncd ducktape\n.\\build.bat\n")),(0,o.kt)("p",null,"Linux:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/ducktapeengine/ducktape.git\ncd ducktape\n./build.sh\n")),(0,o.kt)("p",null,"The build script will prompt you for the build tool to use, the build type (Release/Debug), and the path to your C++ compiler.\nAfter the entering the above information, Ducktape will start compiling. The built binaries will be available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," folder."),(0,o.kt)("p",null,"Now it's time to clean up stuff that you don't need. Feel free to delete all folders and files except the following ones:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"build"),(0,o.kt)("li",{parentName:"ul"},"include"),(0,o.kt)("li",{parentName:"ul"},"dependencies"),(0,o.kt)("li",{parentName:"ul"},"LICENSE")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"These are the same files you get when you download the prebuilt binaries."))),(0,o.kt)("h3",{id:"setting-up-the-project"},"Setting up the project"),(0,o.kt)("p",null,"Let's call the root directory of the project ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),".\nFirst, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"root/lib")," folder and copy ",(0,o.kt)("inlineCode",{parentName:"p"},"Ducktape/build/libducktape.a")," to it. Then, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"root/include")," folder and copy all of the contents from the Ducktape's ",(0,o.kt)("inlineCode",{parentName:"p"},"include")," folder to it.\nAnd, make a ",(0,o.kt)("inlineCode",{parentName:"p"},"main.cpp")," file in ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," and copy the following boilerplate code to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <Ducktape/ducktape.h>\n\nint main()\n{\n    DT::init();\n    return 0;\n}\n")),(0,o.kt)("p",null,"How you actually link to these binaries differs with the build system you use. So it'll be up to you to figure out how to link the library.\nBut essentially, you need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Link to the ",(0,o.kt)("inlineCode",{parentName:"li"},"root/lib/libducktape.a")," binary."),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"root/include")," to the include path.")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"It is crucial to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"root/include")," folder to the include path, otherwise the library won't be able to find the headers."))),(0,o.kt)("p",null,"Now for convenience, here's what a basic g++ build command will look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"g++ -std=c++14 -I./include -L./lib -lducktape -o main.exe main.cpp\n")),(0,o.kt)("p",null,"Now the including and linking ",(0,o.kt)("em",{parentName:"p"},"should")," be done.\nTry compiling the project now!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"But wait!")),(0,o.kt)("p",null,'You aren\'t done yet. You need to copy the contents of "Ducktape/dependencies" to the build folder (aka where the executable is set to be built). These binaries must stay in the same directory as the executable at all times for the executable to run.'),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Yes, we realize this is annoying, and we hope to fix it in a future release."))),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Now"),", run the executable. It should print out the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Ducktape is ready to go!\nGet Started: https://ducktapeengine.github.io/docs/intro\n")),(0,o.kt)("p",null,"Congratulations! You've successfully set up Ducktape."),(0,o.kt)("p",null,"If you encountered any issues, please feel free to ask us on our ",(0,o.kt)("a",{parentName:"p",href:"https://dsc.gg/ducktape"},"Community Discord Server"),"."))}d.isMDXComponent=!0}}]);