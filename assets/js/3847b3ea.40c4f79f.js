"use strict";(self.webpackChunkducktapengine_github_io=self.webpackChunkducktapengine_github_io||[]).push([[581],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),c=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2419:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return b},default:function(){return N},frontMatter:function(){return v},metadata:function(){return g},toc:function(){return y}});var a=n(7462),r=n(3366),o=n(7294),l=n(3905),i=n(2389),u=n(9443);var c=function(){var e=(0,o.useContext)(u.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},p=n(3616),s=n(6010),d="tabItem_vU9c";function m(e){var t,n,r,l=e.lazy,i=e.block,u=e.defaultValue,m=e.values,f=e.groupId,h=e.className,k=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,p.lx)(v,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===u?u:null!=(t=null!=u?u:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=k[0])?void 0:r.props.value;if(null!==g&&!v.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=c(),w=y.tabGroupChoices,N=y.setTabGroupChoices,C=(0,o.useState)(g),O=C[0],T=C[1],D=[],E=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var j=w[f];null!=j&&j!==O&&v.some((function(e){return e.value===j}))&&T(j)}var x=function(e){var t=e.currentTarget,n=D.indexOf(t),a=v[n].value;a!==O&&(E(t),T(a),null!=f&&N(f,a))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=D.indexOf(e.currentTarget)+1;n=D[a]||D[0];break;case"ArrowLeft":var r=D.indexOf(e.currentTarget)-1;n=D[r]||D[D.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":i},h)},v.map((function(e){var t=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:function(e){return D.push(e)},onKeyDown:I,onFocus:x,onClick:x},r,{className:(0,s.Z)("tabs__item",d,null==r?void 0:r.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(k.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}function f(e){var t=(0,i.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}var h=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)},k=["components"],v={},b="Setup",g={unversionedId:"setup",id:"setup",title:"Setup",description:"In order to use Ducktape, you must have the following tools installed: Git, a C++ compiler, CMake, Make.",source:"@site/docs/setup.md",sourceDirName:".",slug:"/setup",permalink:"/docs/setup",editUrl:"https://github.com/ducktapeengine/ducktape/tree/main/packages/create-ducktape/templates/shared/docs/setup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hello Ducktape",permalink:"/docs/intro"}},y=[{value:"Compiling Ducktape",id:"compiling-ducktape",children:[],level:3},{value:"Setting up the project",id:"setting-up-the-project",children:[],level:3}],w={toc:y};function N(e){var t=e.components,n=(0,r.Z)(e,k);return(0,l.kt)("wrapper",(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"setup"},"Setup"),(0,l.kt)("p",null,"In order to use Ducktape, you must have the following tools installed: Git, a C++ compiler, CMake, Make."),(0,l.kt)("h3",{id:"compiling-ducktape"},"Compiling Ducktape"),(0,l.kt)("p",null,"Run the following commands to compile Ducktape:"),(0,l.kt)(f,{mdxType:"Tabs"},(0,l.kt)(h,{value:"windows",label:"Windows",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/DucktapeEngine/Ducktape.git & cd ducktape & .\\build.bat\n"))),(0,l.kt)(h,{value:"linux",label:"Linux",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/DucktapeEngine/Ducktape.git & cd ducktape & ./build.sh\n")))),(0,l.kt)("p",null,"The build script will prompt you for the build tool to use, and the path to your C++ compiler.\nAfter the entering the above information, Ducktape will start compiling. The built binaries will be available in the ",(0,l.kt)("inlineCode",{parentName:"p"},"build")," folder."),(0,l.kt)("h3",{id:"setting-up-the-project"},"Setting up the project"),(0,l.kt)("p",null,"Ducktape requires you to use ",(0,l.kt)("a",{parentName:"p",href:"https://cmake.org/"},"CMake"),", we hope to have support for other build systems in the future, but for now, we'll have to stick with CMake."),(0,l.kt)("p",null,"I'm honestly not sure how to word this documentation, so I'll just be straight forward and provide the steps as bullet points.\nSo first of all, lets call the root directory of your project \"root\" just for the sake of this tutorial. Then follow the steps given below:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Copy the entire ",(0,l.kt)("inlineCode",{parentName:"li"},"Ducktape")," folder into the ",(0,l.kt)("inlineCode",{parentName:"li"},"root")," directory."),(0,l.kt)("li",{parentName:"ul"},"Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"CMakeLists.txt")," file in the ",(0,l.kt)("inlineCode",{parentName:"li"},"root")," directory."),(0,l.kt)("li",{parentName:"ul"},"In the ",(0,l.kt)("inlineCode",{parentName:"li"},"CMakeLists.txt")," file, add the following lines:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cmake"},'cmake_minimum_required (VERSION 3.12)\n\nproject(myproject LANGUAGES CXX)\nset(executable_name "myproject")\n\nadd_executable(myproject main.cpp)\n\nset(DTROOT "${PROJECT_SOURCE_DIR}/Ducktape")\nset(PROJECT myproject)\ninclude(${DTROOT}/cmake/ducktape.cmake)\n')),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"For your information:")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"In this CMake script, we're setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"DTROOT")," variable to the Ducktape directory, and the ",(0,l.kt)("inlineCode",{parentName:"p"},"PROJECT")," variable to the cmake project. After this, you may include the ",(0,l.kt)("inlineCode",{parentName:"p"},"ducktape.cmake")," file in your CMake script \u2014 which is an easy to way to include + link all of the required Ducktape files."))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"main.cpp")," file in the ",(0,l.kt)("inlineCode",{parentName:"li"},"root")," directory."),(0,l.kt)("li",{parentName:"ul"},"In the ",(0,l.kt)("inlineCode",{parentName:"li"},"main.cpp")," file, add the following lines:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <Ducktape/Ducktape.h>\nusing namespace DT;\n\nint main()\n{\n    DT::init();\n    return 0;\n}\n")),(0,l.kt)("p",null,"Time for compiling. Run the following commands to compile the project:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir build & cd build & cmake .. & make\n")),(0,l.kt)("p",null,"Now, run the executable using ",(0,l.kt)("inlineCode",{parentName:"p"},"ducktaptest"),". It should print out the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Ducktape is ready to go!\nGet Started: https://ducktapeengine.github.io/docs/intro\n")),(0,l.kt)("p",null,"Congratulations! You've successfully set up Ducktape."),(0,l.kt)("p",null,"If you encountered any issues, please feel free to ask us on our ",(0,l.kt)("a",{parentName:"p",href:"https://dsc.gg/ducktape"},"Community Discord Server"),"."))}N.isMDXComponent=!0}}]);